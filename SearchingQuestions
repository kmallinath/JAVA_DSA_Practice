//Program to find ceiling and flooring of a given target number form an array of integers
public class MyClass {
    public static void main(String args[]) 
    {
      int [] arr={1,10,20,30,40,50,55,59,60,70,80,90,100,102};
      int target=101;
      int ceil=ceiling(arr,target);
      int floor=flooring(arr,target);
       System.out.print(ceil+" "+floor);
      
    }
    static int ceiling(int[]arr,int target)
    {
        int start=0;
        int end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]==target)
                return mid;
            if(arr[mid]>target)
                end=mid-1;
            else
                start=mid+1;
        }
    
       return arr[start];
    }
    static int flooring(int[]arr,int target)
    {
        int start=0;
        int end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]==target)
                return mid;
            if(arr[mid]>target)
                end=mid-1;
            else
                start=mid+1;
       }
    
    return arr[end];
    }
}




//PROGRAM TO FIND TARGET ELEMENT IN INFINATE ARRAY


import java.io.*;
import java.util.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		int[]a={1,10,11,15,19,20,33,44,55,65,66,67,70,78,88,99,100};
		int target=55;
		int answer=ans(a,target);
		System.out.print(answer);
		
		
		
	}
	static int ans(int a[],int target)
	{
	    int start=0;
        int end=1; 
		while(true)
		{
		    int ans=bs(a,target,start,end);
		    if(ans!=-1)
		        return ans;
		    start=end+1;
		    end=start+2*(end-start+1);
		    
		}
		
	}
	static int bs(int[] arr,int target,int start,int end)
	{
	    
       while(start<=end)
       {
           int mid=start+(end-start)/2;
           if(arr[mid]>target)
               end=mid-1;
           else if(arr[mid]<target)
               start=mid+1;
           else
           {   
              return mid;
           }
	  }
	  return -1;
	}
}


//FINDING TARGET IN ROTATED SORTED ARRAY WITH DUPLICATES
class Main {
    public int search(int[] nums, int target) {
        int p=pivot(nums);
        int ans=-1;
        System.out.print(p);
        if(p==-1)
            return bs(nums,target,0,nums.length-1);
        if(nums[p]==target)
            return p;
        
        if(target>=nums[0]){
            ans=bs(nums,target,0,p-1);
            return ans;
            
        }
        ans=bs(nums,target,p+1,nums.length-1);
        return ans;
    
        
    }
    int pivot(int []nums)
    {
        int start=0;
        int end=nums.length-1;
        while(start<end)
        {
            int mid=start+(end-start)/2;
             if(mid<end && nums[mid]>nums[mid+1])
                 return mid;
         
             if(mid>start && nums[mid]<nums[mid-1])
                 return mid-1;
            if(nums[mid]==nums[start] && nums[mid]==nums[end])
            {
                if(nums[start]>nums[start+1])
                {
                    return start;
                }
                start++;
                if(nums[end]<nums[end-1]){
                    return end-1;
                }
                end--;
                if(nums[start]<nums[mid]||(nums[start]==nums[mid] && nums[mid]>nums[end])){
                    start=mid+1;
                } 
                else{
                    end=mid-1;
                }
                
            }
             
        }
        return -1;

    }
     int bs(int []nums,int target,int start,int end)
    {
    
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]<target)
                start=mid+1;
            else
                end=mid-1;
             
        }
        return -1;
    }
    
    
}



=========================================================================================================================================================================
// 2D ARRAY SEARCHING

import java.util.*;

class BinarySearch2D
{

public static void main(String[] args) 
{
    // THIS CODE OS FOR MATRIX SORTED COLUMN WISE AND ROW WISE
    /*int[][]arr={
        {1,2,4,10},
        {5,6,8,17},
        {9,7,13,22}
    };
    int target=6;
    int[] ans=bs(arr,target);
    System.out.print(Arrays.toString(ans));
    */
    
    //THIS CODE IS FOR MATRIX SORTED 
    int[][]arr1={
        {1,2,3,9},
        {10,16,18,27},
        {30,37,43,52}
    };
    int target=30;
    int [] ans=bs2(arr1,target);
    System.out.print(Arrays.toString(ans));


}

static int[]  bs(int [][]arr,int target)
{
    int row=0;
    int col=arr[0].length-1;
    while(row<arr.length && col>=0)
    {
        if(target<arr[row][col])
            col--;
        else if(target>arr[row][col])
            row++;
        else
            return new int[]{row,col};


    }
    return new int[]{-1,-1};
    
}

static int[]  bs2(int [][]arr,int target)
{
    int startrow=0;
    int col=arr[0].length-1;
    int midcol=col/2;
    int endrow=arr.length-1;
    
    while(endrow-startrow>1)
    {
        int midrow=startrow + (endrow-startrow)/2;
        if(target==arr[midrow][midcol])
            return new int[] {midrow,midcol};
        else if(target>arr[midrow][col])
            startrow=midrow;
        else
            endrow=midrow;


    }
    if(arr[startrow][midcol]==target)
        return new int[] {startrow,midcol};
    if(arr[endrow][midcol]==target)
        return new int[] {endrow,midcol};
    if(target<=arr[startrow][midcol-1])
    {
        return binarysearch(arr, target,0,midcol-1,startrow);


    }
    if(target>=arr[startrow][midcol+1] && target <arr[endrow][midcol+1])
    {
        return binarysearch(arr, target,midcol+1,col,startrow);


    }
    if(target<=arr[endrow][midcol-1])
    {
        return binarysearch(arr, target,0,midcol-1,endrow);


    }
    else
    {
        return binarysearch(arr, target,midcol+1,col,endrow);


    }




    


    
    
    
}

static int[] binarysearch(int[][]arr,int target,int start,int end,int row)
	{
	  
	    
	    while(start<=end)
	    {   int mid=start+(end-start)/2;
	        if(arr[row][mid]==target)
	            return new int[] {row,mid};
	        else if (arr[row][mid]>target)
	            end=mid-1;
	        else
	            start=mid+1;
	    }
	    return new int[]{-1,-1};
	}



}


